import streamlit as st # Biblioteca principal para criar o web app
import pandas as pd # Para manipula√ß√£o e an√°lise de dados (DataFrames)
import plotly.express as px # Para criar gr√°ficos interativos

# --- 1. Estiliza√ß√£o Personalizada (CSS) ---
# Aqui, definimos estilos para dar uma cara √∫nica ao nosso dashboard.
st.markdown("""
    <style>
    /* Estiliza o sidebar (barra lateral) */
    [data-testid="stSidebar"] {
        background-color: #FDB713; /* Amarelo Vibrante, inspirado no ODS 7 (Energia Limpa) */
        padding: 2rem 1rem; /* Espa√ßamento interno */
        color: white; /* Cor do texto no sidebar */
    }

    /* Estiliza o texto dentro do multiselect no sidebar */
    [data-testid="stSidebar"] .stMultiSelect [data-testid="stMarkdownContainer"] p {
        background-color: #FDB713;
        color: #ffffff;
        border-radius: 5px;
        padding: 2px 6px;
        margin: 2px;
    }
    </style>
""", unsafe_allow_html=True) # Permite a inje√ß√£o de HTML/CSS

# --- 2. Configura√ß√£o Inicial da P√°gina ---
# Define como a p√°gina ser√° exibida.
st.set_page_config(
    page_title="Dashboard ODS 7", # T√≠tulo que aparece na aba do navegador
    layout="wide" # Usa a largura total da tela para o conte√∫do
)

# --- 3. Carregamento e Prepara√ß√£o dos Dados ---
# Usamos o decorator st.cache_data para que o Streamlit carregue o arquivo
# apenas uma vez, tornando o app mais r√°pido!
@st.cache_data
def carregar_dados():
    # üí° Dica: Certifique-se de que 'acesso_eletricidade_limpo.csv' est√° na mesma pasta!
    df = pd.read_csv('acesso_eletricidade_limpo.csv')
    # Renomeamos a coluna 'Pais' para 'Entidade' para ser mais gen√©rico e claro
    df = df.rename(columns={'Pais': 'Entidade'})
    return df

df = carregar_dados() # Carrega o DataFrame

# --- 4. T√≠tulo Principal ---
st.title("Acessibilidade √† Eletricidade")

# --- 5. Sidebar (Barra Lateral para Filtros) ---
# A barra lateral √© onde colocamos os controles para interagir com os dados.
try:
    # Tenta carregar uma imagem (logotipo, por exemplo)
    st.sidebar.image('images.png')
except:
    # Se a imagem n√£o for encontrada, mostra um aviso
    st.sidebar.warning("Imagem 'images.png' n√£o encontrada.")

st.sidebar.header("Filtros")

# Prepara as listas de op√ß√µes para os filtros
lista_entidades = sorted(df['Entidade'].unique())
lista_anos = sorted(df['Ano'].unique())

# Filtro MultiSelect: Permite escolher quais pa√≠ses/entidades visualizar
entidades_selecionados = st.sidebar.multiselect(
    label="Escolha as entidades para visualizar:",
    options=lista_entidades,
    # Define uma sele√ß√£o padr√£o para facilitar o primeiro acesso
    default=['Brazil', 'Angola', 'South Africa', 'United States', 'India']
)

# --- 6. Filtragem dos Dados ---
# Aplica o filtro selecionado pelo usu√°rio no DataFrame original
df_filtrado = df[df['Entidade'].isin(entidades_selecionados)]

# --- 7. Cria√ß√£o das Abas de Visualiza√ß√£o ---
# Organizamos o dashboard em abas para separar os tipos de gr√°ficos.
tab1, tab2, tab3 = st.tabs(["Evolu√ß√£o", "M√©dia por Entidade", "Foco em um Ano"])

# --- 8. Visualiza√ß√µes em Plotly ---

# --- Aba 1: Evolu√ß√£o (Gr√°fico de Linhas) ---
with tab1:
    st.subheader("Evolu√ß√£o do Acesso √† Eletricidade")
    # Gr√°fico de linha: √ìtimo para ver a tend√™ncia ao longo do tempo (Ano)
    fig1 = px.line(
        df_filtrado,
        x='Ano',
        y='Percentual_Acesso',
        color='Entidade', # Uma linha diferente para cada entidade
        markers=True, # Adiciona pontos para destacar os anos
        title='Evolu√ß√£o do Acesso √† Eletricidade nas Entidades Selecionados',
        labels={'Percentual_Acesso': '% da Popula√ß√£o com Acesso'}
    )
    st.plotly_chart(fig1, use_container_width=True) # Exibe o gr√°fico

# --- Aba 2: M√©dia por Entidade (Gr√°fico de Barras) ---
with tab2:
    st.subheader("M√©dia do Percentual de Acesso √† Eletricidade (2000‚Äì2023)")

    # 1. Calcula a m√©dia de acesso para cada entidade selecionada
    df_media = (
        df_filtrado.groupby('Entidade')['Percentual_Acesso']
        .mean()
        .reset_index()
        # Ordena para ter uma visualiza√ß√£o mais organizada no gr√°fico de barras
        .sort_values(by='Percentual_Acesso', ascending=True)
    )

    # 2. Cria o Gr√°fico de Barras
    fig2 = px.bar(
        df_media,
        x='Percentual_Acesso',
        y='Entidade',
        orientation='h', # 'h' para horizontal (melhor para r√≥tulos longos)
        color='Entidade',
        title='M√©dia do Acesso √† Eletricidade por Pa√≠s',
        labels={'Percentual_Acesso': 'M√©dia % da Popula√ß√£o com Acesso', 'Entidade': 'Entidade'}
    )
    st.plotly_chart(fig2, use_container_width=True)

# --- Aba 3: Foco em um Ano (Gr√°fico de Tiras/Strip Plot) ---
with tab3:
    st.subheader("Comparativo de Acesso √† Eletricidade em um Ano Espec√≠fico")
    # Seletor para escolher o ano (come√ßa no ano mais recente)
    ano_foco = st.selectbox(
        "Escolha o ano de foco:",
        lista_anos,
        index=len(lista_anos)-1 # O 'index=-1' seleciona o √∫ltimo item da lista (ano mais recente)
    )

    # 1. Filtra o DataFrame apenas para o ano escolhido
    df_ano = df[df['Ano'] == ano_foco].copy()
    # 2. Filtra pelas entidades selecionadas no sidebar
    df_ano = df_ano[df_ano['Entidade'].isin(entidades_selecionados)]
    # Adiciona uma coluna de texto formatado para usar no hover/r√≥tulos (apesar de n√£o usado no gr√°fico final, √© uma boa pr√°tica)
    df_ano['Percentual_Acesso_Texto'] = df_ano['Percentual_Acesso'].apply(lambda x: f'{x:.1f}%')


    # 3. Cria o Strip Plot
    # Strip Plot: √ötil para mostrar a distribui√ß√£o de um valor num√©rico por categoria.
    # Como s√≥ teremos um ponto por entidade neste caso (um √∫nico ano), funciona
    # como um gr√°fico de pontos de compara√ß√£o.
    fig3 = px.strip(
        df_ano,
        x='Percentual_Acesso',
        y='Entidade',
        orientation='h',
        color='Entidade',
        hover_name='Entidade',
        # Configura o que aparece ao passar o mouse (hover)
        hover_data={'Percentual_Acesso': ':.2f', 'Entidade': False},
        title=f'Comparativo de Acesso √† Eletricidade em {ano_foco}',
        labels={'Percentual_Acesso': '% da Popula√ß√£o com Acesso', 'Entidade': 'Entidade'}
    )
    # Ajusta o visual: aumenta o tamanho dos pontos para melhor visibilidade
    fig3.update_traces(marker=dict(size=15))
    st.plotly_chart(fig3, use_container_width=True)

# --- 9. Visualiza√ß√£o Opcional dos Dados ---
# Um 'Expander' √© um widget que pode ser aberto e fechado, economizando espa√ßo.
with st.expander("Ver dados filtrados"):
    st.dataframe(df_filtrado) # Mostra o DataFrame que est√° sendo usado nos gr√°ficos